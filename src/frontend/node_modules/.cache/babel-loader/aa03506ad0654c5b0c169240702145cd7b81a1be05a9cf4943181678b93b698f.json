{"ast":null,"code":"import _objectSpread from \"/Users/dai/Documents/Memo-App/src/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regenerator from \"/Users/dai/Documents/Memo-App/src/frontend/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"/Users/dai/Documents/Memo-App/src/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.date.now.js\";\nimport \"core-js/modules/es.date.to-iso-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nvar state = {\n  memos: [],\n  currentMemo: null,\n  loading: false,\n  error: null\n};\nvar getters = {\n  allMemos: function allMemos(state) {\n    return state.memos;\n  },\n  currentMemo: function currentMemo(state) {\n    return state.currentMemo;\n  },\n  isLoading: function isLoading(state) {\n    return state.loading;\n  },\n  error: function error(state) {\n    return state.error;\n  }\n};\nvar actions = {\n  fetchMemos: function fetchMemos(_ref) {\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {\n      var commit, mockMemos;\n      return _regenerator().w(function (_context) {\n        while (1) switch (_context.n) {\n          case 0:\n            commit = _ref.commit;\n            // モックデータ\n            mockMemos = [{\n              id: 1,\n              title: 'サンプルメモ1',\n              content: 'これはサンプルメモの内容です。',\n              category: '仕事',\n              createdAt: '2024-03-20T10:00:00Z',\n              updatedAt: '2024-03-20T10:00:00Z'\n            }, {\n              id: 2,\n              title: 'サンプルメモ2',\n              content: 'もう一つのサンプルメモです。',\n              category: 'プライベート',\n              createdAt: '2024-03-20T11:00:00Z',\n              updatedAt: '2024-03-20T11:00:00Z'\n            }];\n            commit('SET_MEMOS', mockMemos);\n            return _context.a(2, mockMemos);\n        }\n      }, _callee);\n    }))();\n  },\n  fetchMemo: function fetchMemo(_ref2, id) {\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2() {\n      var commit, response, _t;\n      return _regenerator().w(function (_context2) {\n        while (1) switch (_context2.n) {\n          case 0:\n            commit = _ref2.commit;\n            commit('SET_LOADING', true);\n            _context2.p = 1;\n            _context2.n = 2;\n            return axios.get(\"/api/memos/\".concat(id));\n          case 2:\n            response = _context2.v;\n            commit('SET_CURRENT_MEMO', response.data);\n            _context2.n = 4;\n            break;\n          case 3:\n            _context2.p = 3;\n            _t = _context2.v;\n            commit('SET_ERROR', _t.message);\n          case 4:\n            _context2.p = 4;\n            commit('SET_LOADING', false);\n            return _context2.f(4);\n          case 5:\n            return _context2.a(2);\n        }\n      }, _callee2, null, [[1, 3, 4, 5]]);\n    }))();\n  },\n  createMemo: function createMemo(_ref3, memo) {\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3() {\n      var commit, newMemo;\n      return _regenerator().w(function (_context3) {\n        while (1) switch (_context3.n) {\n          case 0:\n            commit = _ref3.commit;\n            // モックデータ\n            newMemo = _objectSpread(_objectSpread({\n              id: Date.now()\n            }, memo), {}, {\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString()\n            });\n            commit('ADD_MEMO', newMemo);\n            return _context3.a(2, newMemo);\n        }\n      }, _callee3);\n    }))();\n  },\n  updateMemo: function updateMemo(_ref4, memo) {\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4() {\n      var commit, updatedMemo;\n      return _regenerator().w(function (_context4) {\n        while (1) switch (_context4.n) {\n          case 0:\n            commit = _ref4.commit;\n            // モックデータ\n            updatedMemo = _objectSpread(_objectSpread({}, memo), {}, {\n              updatedAt: new Date().toISOString()\n            });\n            commit('UPDATE_MEMO', updatedMemo);\n            return _context4.a(2, updatedMemo);\n        }\n      }, _callee4);\n    }))();\n  },\n  deleteMemo: function deleteMemo(_ref5, id) {\n    return _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5() {\n      var commit;\n      return _regenerator().w(function (_context5) {\n        while (1) switch (_context5.n) {\n          case 0:\n            commit = _ref5.commit;\n            // モックデータ\n            commit('DELETE_MEMO', id);\n            return _context5.a(2, id);\n        }\n      }, _callee5);\n    }))();\n  }\n};\nvar mutations = {\n  SET_MEMOS: function SET_MEMOS(state, memos) {\n    state.memos = memos;\n  },\n  SET_CURRENT_MEMO: function SET_CURRENT_MEMO(state, memo) {\n    state.currentMemo = memo;\n  },\n  ADD_MEMO: function ADD_MEMO(state, memo) {\n    state.memos.push(memo);\n  },\n  UPDATE_MEMO: function UPDATE_MEMO(state, updatedMemo) {\n    var index = state.memos.findIndex(function (m) {\n      return m.id === updatedMemo.id;\n    });\n    if (index !== -1) {\n      state.memos.splice(index, 1, updatedMemo);\n    }\n  },\n  DELETE_MEMO: function DELETE_MEMO(state, id) {\n    state.memos = state.memos.filter(function (m) {\n      return m.id !== id;\n    });\n  },\n  SET_LOADING: function SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR: function SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};","map":{"version":3,"names":["axios","state","memos","currentMemo","loading","error","getters","allMemos","isLoading","actions","fetchMemos","_ref","_asyncToGenerator","_regenerator","m","_callee","commit","mockMemos","w","_context","n","id","title","content","category","createdAt","updatedAt","a","fetchMemo","_ref2","_callee2","response","_t","_context2","p","get","concat","v","data","message","f","createMemo","_ref3","memo","_callee3","newMemo","_context3","_objectSpread","Date","now","toISOString","updateMemo","_ref4","_callee4","updatedMemo","_context4","deleteMemo","_ref5","_callee5","_context5","mutations","SET_MEMOS","SET_CURRENT_MEMO","ADD_MEMO","push","UPDATE_MEMO","index","findIndex","splice","DELETE_MEMO","filter","SET_LOADING","SET_ERROR","namespaced"],"sources":["/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/memo.js"],"sourcesContent":["import axios from 'axios'\n\nconst state = {\n  memos: [],\n  currentMemo: null,\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  allMemos: state => state.memos,\n  currentMemo: state => state.currentMemo,\n  isLoading: state => state.loading,\n  error: state => state.error\n}\n\nconst actions = {\n  async fetchMemos({ commit }) {\n    // モックデータ\n    const mockMemos = [\n      {\n        id: 1,\n        title: 'サンプルメモ1',\n        content: 'これはサンプルメモの内容です。',\n        category: '仕事',\n        createdAt: '2024-03-20T10:00:00Z',\n        updatedAt: '2024-03-20T10:00:00Z'\n      },\n      {\n        id: 2,\n        title: 'サンプルメモ2',\n        content: 'もう一つのサンプルメモです。',\n        category: 'プライベート',\n        createdAt: '2024-03-20T11:00:00Z',\n        updatedAt: '2024-03-20T11:00:00Z'\n      }\n    ]\n    commit('SET_MEMOS', mockMemos)\n    return mockMemos\n  },\n\n  async fetchMemo({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get(`/api/memos/${id}`)\n      commit('SET_CURRENT_MEMO', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async createMemo({ commit }, memo) {\n    // モックデータ\n    const newMemo = {\n      id: Date.now(),\n      ...memo,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n    commit('ADD_MEMO', newMemo)\n    return newMemo\n  },\n\n  async updateMemo({ commit }, memo) {\n    // モックデータ\n    const updatedMemo = {\n      ...memo,\n      updatedAt: new Date().toISOString()\n    }\n    commit('UPDATE_MEMO', updatedMemo)\n    return updatedMemo\n  },\n\n  async deleteMemo({ commit }, id) {\n    // モックデータ\n    commit('DELETE_MEMO', id)\n    return id\n  }\n}\n\nconst mutations = {\n  SET_MEMOS(state, memos) {\n    state.memos = memos\n  },\n  SET_CURRENT_MEMO(state, memo) {\n    state.currentMemo = memo\n  },\n  ADD_MEMO(state, memo) {\n    state.memos.push(memo)\n  },\n  UPDATE_MEMO(state, updatedMemo) {\n    const index = state.memos.findIndex(m => m.id === updatedMemo.id)\n    if (index !== -1) {\n      state.memos.splice(index, 1, updatedMemo)\n    }\n  },\n  DELETE_MEMO(state, id) {\n    state.memos = state.memos.filter(m => m.id !== id)\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}