{"ast":null,"code":"import axios from 'axios';\nconst state = {\n  categories: [],\n  loading: false,\n  error: null\n};\nconst getters = {\n  allCategories: state => state.categories,\n  isLoading: state => state.loading,\n  error: state => state.error\n};\nconst actions = {\n  async fetchCategories({\n    commit\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.get('/api/categories');\n      commit('SET_CATEGORIES', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async createCategory({\n    commit\n  }, category) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.post('/api/categories', category);\n      commit('ADD_CATEGORY', response.data);\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async updateCategory({\n    commit\n  }, {\n    id,\n    category\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.put(`/api/categories/${id}`, category);\n      commit('UPDATE_CATEGORY', response.data);\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async deleteCategory({\n    commit\n  }, id) {\n    commit('SET_LOADING', true);\n    try {\n      await axios.delete(`/api/categories/${id}`);\n      commit('DELETE_CATEGORY', id);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  }\n};\nconst mutations = {\n  SET_CATEGORIES(state, categories) {\n    state.categories = categories;\n  },\n  ADD_CATEGORY(state, category) {\n    state.categories.push(category);\n  },\n  UPDATE_CATEGORY(state, updatedCategory) {\n    const index = state.categories.findIndex(c => c.id === updatedCategory.id);\n    if (index !== -1) {\n      state.categories.splice(index, 1, updatedCategory);\n    }\n  },\n  DELETE_CATEGORY(state, id) {\n    state.categories = state.categories.filter(c => c.id !== id);\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","state","categories","loading","error","getters","allCategories","isLoading","actions","fetchCategories","commit","response","get","data","message","createCategory","category","post","updateCategory","id","put","deleteCategory","delete","mutations","SET_CATEGORIES","ADD_CATEGORY","push","UPDATE_CATEGORY","updatedCategory","index","findIndex","c","splice","DELETE_CATEGORY","filter","SET_LOADING","SET_ERROR","namespaced"],"sources":["/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/category.js"],"sourcesContent":["import axios from 'axios'\n\nconst state = {\n  categories: [],\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  allCategories: state => state.categories,\n  isLoading: state => state.loading,\n  error: state => state.error\n}\n\nconst actions = {\n  async fetchCategories({ commit }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get('/api/categories')\n      commit('SET_CATEGORIES', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async createCategory({ commit }, category) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.post('/api/categories', category)\n      commit('ADD_CATEGORY', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async updateCategory({ commit }, { id, category }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.put(`/api/categories/${id}`, category)\n      commit('UPDATE_CATEGORY', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async deleteCategory({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      await axios.delete(`/api/categories/${id}`)\n      commit('DELETE_CATEGORY', id)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nconst mutations = {\n  SET_CATEGORIES(state, categories) {\n    state.categories = categories\n  },\n  ADD_CATEGORY(state, category) {\n    state.categories.push(category)\n  },\n  UPDATE_CATEGORY(state, updatedCategory) {\n    const index = state.categories.findIndex(c => c.id === updatedCategory.id)\n    if (index !== -1) {\n      state.categories.splice(index, 1, updatedCategory)\n    }\n  },\n  DELETE_CATEGORY(state, id) {\n    state.categories = state.categories.filter(c => c.id !== id)\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}