{"ast":null,"code":"import axios from 'axios';\nconst state = {\n  memos: [],\n  currentMemo: null,\n  loading: false,\n  error: null\n};\nconst getters = {\n  allMemos: state => state.memos,\n  currentMemo: state => state.currentMemo,\n  isLoading: state => state.loading,\n  error: state => state.error\n};\nconst actions = {\n  async fetchMemos({\n    commit\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.get('/api/memos');\n      commit('SET_MEMOS', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async fetchMemo({\n    commit\n  }, id) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.get(`/api/memos/${id}`);\n      commit('SET_CURRENT_MEMO', response.data);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async createMemo({\n    commit\n  }, memo) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.post('/api/memos', memo);\n      commit('ADD_MEMO', response.data);\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async updateMemo({\n    commit\n  }, {\n    id,\n    memo\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const response = await axios.put(`/api/memos/${id}`, memo);\n      commit('UPDATE_MEMO', response.data);\n      return response.data;\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async deleteMemo({\n    commit\n  }, id) {\n    commit('SET_LOADING', true);\n    try {\n      await axios.delete(`/api/memos/${id}`);\n      commit('DELETE_MEMO', id);\n    } catch (error) {\n      commit('SET_ERROR', error.message);\n      throw error;\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  }\n};\nconst mutations = {\n  SET_MEMOS(state, memos) {\n    state.memos = memos;\n  },\n  SET_CURRENT_MEMO(state, memo) {\n    state.currentMemo = memo;\n  },\n  ADD_MEMO(state, memo) {\n    state.memos.unshift(memo);\n  },\n  UPDATE_MEMO(state, updatedMemo) {\n    const index = state.memos.findIndex(m => m.id === updatedMemo.id);\n    if (index !== -1) {\n      state.memos.splice(index, 1, updatedMemo);\n    }\n  },\n  DELETE_MEMO(state, id) {\n    state.memos = state.memos.filter(m => m.id !== id);\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","state","memos","currentMemo","loading","error","getters","allMemos","isLoading","actions","fetchMemos","commit","response","get","data","message","fetchMemo","id","createMemo","memo","post","updateMemo","put","deleteMemo","delete","mutations","SET_MEMOS","SET_CURRENT_MEMO","ADD_MEMO","unshift","UPDATE_MEMO","updatedMemo","index","findIndex","m","splice","DELETE_MEMO","filter","SET_LOADING","SET_ERROR","namespaced"],"sources":["/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/memo.js"],"sourcesContent":["import axios from 'axios'\n\nconst state = {\n  memos: [],\n  currentMemo: null,\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  allMemos: state => state.memos,\n  currentMemo: state => state.currentMemo,\n  isLoading: state => state.loading,\n  error: state => state.error\n}\n\nconst actions = {\n  async fetchMemos({ commit }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get('/api/memos')\n      commit('SET_MEMOS', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async fetchMemo({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get(`/api/memos/${id}`)\n      commit('SET_CURRENT_MEMO', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async createMemo({ commit }, memo) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.post('/api/memos', memo)\n      commit('ADD_MEMO', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async updateMemo({ commit }, { id, memo }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.put(`/api/memos/${id}`, memo)\n      commit('UPDATE_MEMO', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async deleteMemo({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      await axios.delete(`/api/memos/${id}`)\n      commit('DELETE_MEMO', id)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nconst mutations = {\n  SET_MEMOS(state, memos) {\n    state.memos = memos\n  },\n  SET_CURRENT_MEMO(state, memo) {\n    state.currentMemo = memo\n  },\n  ADD_MEMO(state, memo) {\n    state.memos.unshift(memo)\n  },\n  UPDATE_MEMO(state, updatedMemo) {\n    const index = state.memos.findIndex(m => m.id === updatedMemo.id)\n    if (index !== -1) {\n      state.memos.splice(index, 1, updatedMemo)\n    }\n  },\n  DELETE_MEMO(state, id) {\n    state.memos = state.memos.filter(m => m.id !== id)\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}