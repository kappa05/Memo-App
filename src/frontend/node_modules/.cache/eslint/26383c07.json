[{"/Users/dai/Documents/Memo-App/src/frontend/src/main.js":"1","/Users/dai/Documents/Memo-App/src/frontend/src/App.vue":"2","/Users/dai/Documents/Memo-App/src/frontend/src/router/index.js":"3","/Users/dai/Documents/Memo-App/src/frontend/src/store/index.js":"4","/Users/dai/Documents/Memo-App/src/frontend/src/views/CategoryList.vue":"5","/Users/dai/Documents/Memo-App/src/frontend/src/views/MemoEdit.vue":"6","/Users/dai/Documents/Memo-App/src/frontend/src/views/MemoDetail.vue":"7","/Users/dai/Documents/Memo-App/src/frontend/src/views/Login.vue":"8","/Users/dai/Documents/Memo-App/src/frontend/src/views/MemoList.vue":"9","/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/auth.js":"10","/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/category.js":"11","/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/memo.js":"12","/Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalErrorHandler.vue":"13","/Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalLoading.vue":"14","/Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalNavigation.vue":"15"},{"size":528,"mtime":1749351612246,"results":"16","hashOfConfig":"17"},{"size":922,"mtime":1749351743598,"results":"18","hashOfConfig":"17"},{"size":1457,"mtime":1749352266725,"results":"19","hashOfConfig":"17"},{"size":228,"mtime":1749351633069,"results":"20","hashOfConfig":"17"},{"size":4970,"mtime":1749351711671,"results":"21","hashOfConfig":"17"},{"size":3292,"mtime":1749352124604,"results":"22","hashOfConfig":"17"},{"size":4964,"mtime":1749351698875,"results":"23","hashOfConfig":"17"},{"size":2616,"mtime":1749351669632,"results":"24","hashOfConfig":"17"},{"size":6656,"mtime":1749351685014,"results":"25","hashOfConfig":"17"},{"size":1067,"mtime":1749351640080,"results":"26","hashOfConfig":"17"},{"size":2326,"mtime":1749351660309,"results":"27","hashOfConfig":"17"},{"size":2610,"mtime":1749351650846,"results":"28","hashOfConfig":"17"},{"size":2130,"mtime":1749352135396,"results":"29","hashOfConfig":"17"},{"size":621,"mtime":1749351726148,"results":"30","hashOfConfig":"17"},{"size":1699,"mtime":1749351736004,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"867tgj",{"filePath":"35","messages":"36","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"/Users/dai/Documents/Memo-App/src/frontend/src/main.js",["76"],"import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport 'vuetify/styles'\nimport { createVuetify } from 'vuetify'\nimport * as components from 'vuetify/components'\nimport * as directives from 'vuetify/directives'\nimport '@mdi/font/css/materialdesignicons.css'\n\nconst vuetify = createVuetify({\n  components,\n  directives,\n  theme: {\n    defaultTheme: 'light'\n  }\n})\n\nconst app = createApp(App)\n\napp.use(store)\napp.use(router)\napp.use(vuetify)\n\napp.mount('#app') ","/Users/dai/Documents/Memo-App/src/frontend/src/App.vue",["77"],"<template>\n  <v-app>\n    <global-navigation v-if=\"isLoggedIn\" />\n    <global-error-handler />\n    <global-loading />\n    <v-main>\n      <router-view></router-view>\n    </v-main>\n  </v-app>\n</template>\n\n<script>\nimport { computed } from 'vue'\nimport { useStore } from 'vuex'\nimport GlobalNavigation from '@/components/GlobalNavigation.vue'\nimport GlobalErrorHandler from '@/components/GlobalErrorHandler.vue'\nimport GlobalLoading from '@/components/GlobalLoading.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    GlobalNavigation,\n    GlobalErrorHandler,\n    GlobalLoading\n  },\n  setup() {\n    const store = useStore()\n    const isLoggedIn = computed(() => store.getters['auth/isLoggedIn'])\n\n    return {\n      isLoggedIn\n    }\n  }\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');\n\nbody {\n  font-family: 'Noto Sans JP', sans-serif;\n}\n</style> ","/Users/dai/Documents/Memo-App/src/frontend/src/router/index.js",[],"/Users/dai/Documents/Memo-App/src/frontend/src/store/index.js",["78"],"import { createStore } from 'vuex'\nimport auth from './modules/auth'\nimport memo from './modules/memo'\nimport category from './modules/category'\n\nexport default createStore({\n  modules: {\n    auth,\n    memo,\n    category\n  }\n}) ","/Users/dai/Documents/Memo-App/src/frontend/src/views/CategoryList.vue",["79"],"<template>\n  <v-container>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-card>\n          <v-card-title>\n            カテゴリー管理\n            <v-spacer></v-spacer>\n            <v-btn\n              color=\"primary\"\n              dark\n              class=\"mb-2\"\n              @click=\"createCategory\"\n            >\n              新規カテゴリー作成\n            </v-btn>\n          </v-card-title>\n\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"categories\"\n            :loading=\"loading\"\n            class=\"elevation-1\"\n          >\n            <template v-slot:[`item.color`]=\"{ item }\">\n              <v-chip\n                :color=\"item.color\"\n                text-color=\"white\"\n              >\n                {{ item.color }}\n              </v-chip>\n            </template>\n\n            <template v-slot:[`item.actions`]=\"{ item }\">\n              <v-icon\n                small\n                class=\"mr-2\"\n                @click=\"editCategory(item)\"\n              >\n                mdi-pencil\n              </v-icon>\n              <v-icon\n                small\n                @click=\"deleteCategory(item)\"\n              >\n                mdi-delete\n              </v-icon>\n            </template>\n          </v-data-table>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-dialog v-model=\"dialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title>\n          <span class=\"text-h5\">{{ formTitle }}</span>\n        </v-card-title>\n\n        <v-card-text>\n          <v-container>\n            <v-row>\n              <v-col cols=\"12\">\n                <v-text-field\n                  v-model=\"editedItem.name\"\n                  label=\"カテゴリー名\"\n                ></v-text-field>\n              </v-col>\n              <v-col cols=\"12\">\n                <v-color-picker\n                  v-model=\"editedItem.color\"\n                  mode=\"hex\"\n                  hide-inputs\n                  class=\"mx-auto\"\n                ></v-color-picker>\n              </v-col>\n            </v-row>\n          </v-container>\n        </v-card-text>\n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" text @click=\"close\">キャンセル</v-btn>\n          <v-btn color=\"blue darken-1\" text @click=\"save\">保存</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'CategoryList',\n  setup() {\n    const store = useStore()\n\n    const dialog = ref(false)\n    const editedIndex = ref(-1)\n    const editedItem = ref({\n      name: '',\n      color: '#000000'\n    })\n    const defaultItem = {\n      name: '',\n      color: '#000000'\n    }\n\n    const headers = [\n      { text: 'カテゴリー名', value: 'name' },\n      { text: '色', value: 'color' },\n      { text: '操作', value: 'actions', sortable: false }\n    ]\n\n    const loading = computed(() => store.getters['category/isLoading'])\n    const categories = computed(() => store.getters['category/allCategories'])\n\n    const formTitle = computed(() => {\n      return editedIndex.value === -1 ? '新規カテゴリー' : 'カテゴリー編集'\n    })\n\n    const createCategory = () => {\n      editedIndex.value = -1\n      editedItem.value = Object.assign({}, defaultItem)\n      dialog.value = true\n    }\n\n    const editCategory = (item) => {\n      editedIndex.value = categories.value.indexOf(item)\n      editedItem.value = Object.assign({}, item)\n      dialog.value = true\n    }\n\n    const deleteCategory = async (item) => {\n      if (confirm('このカテゴリーを削除してもよろしいですか？')) {\n        try {\n          await store.dispatch('category/deleteCategory', item.id)\n        } catch (error) {\n          // エラー処理はグローバルエラーハンドラーで行う\n        }\n      }\n    }\n\n    const close = () => {\n      dialog.value = false\n      editedItem.value = Object.assign({}, defaultItem)\n      editedIndex.value = -1\n    }\n\n    const save = async () => {\n      try {\n        if (editedIndex.value > -1) {\n          await store.dispatch('category/updateCategory', {\n            id: editedItem.value.id,\n            ...editedItem.value\n          })\n        } else {\n          await store.dispatch('category/createCategory', editedItem.value)\n        }\n        close()\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    }\n\n    onMounted(async () => {\n      try {\n        await store.dispatch('category/fetchCategories')\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    })\n\n    return {\n      dialog,\n      editedIndex,\n      editedItem,\n      headers,\n      loading,\n      categories,\n      formTitle,\n      createCategory,\n      editCategory,\n      deleteCategory,\n      close,\n      save\n    }\n  }\n}\n</script> ","/Users/dai/Documents/Memo-App/src/frontend/src/views/MemoEdit.vue",["80"],"<template>\n  <v-container>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-card>\n          <v-card-title>\n            <span class=\"text-h5\">{{ isNew ? '新規メモ' : 'メモ編集' }}</span>\n          </v-card-title>\n\n          <v-card-text>\n            <v-container>\n              <v-row>\n                <v-col cols=\"12\">\n                  <v-text-field\n                    v-model=\"memo.title\"\n                    label=\"タイトル\"\n                    :rules=\"[rules.required]\"\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\">\n                  <v-textarea\n                    v-model=\"memo.content\"\n                    label=\"内容\"\n                    :rules=\"[rules.required]\"\n                  ></v-textarea>\n                </v-col>\n                <v-col cols=\"12\">\n                  <v-select\n                    v-model=\"memo.category\"\n                    :items=\"categories\"\n                    label=\"カテゴリー\"\n                    :rules=\"[rules.required]\"\n                  ></v-select>\n                </v-col>\n              </v-row>\n            </v-container>\n          </v-card-text>\n\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn\n              color=\"blue darken-1\"\n              text\n              @click=\"$router.push('/memos')\"\n            >\n              キャンセル\n            </v-btn>\n            <v-btn\n              color=\"blue darken-1\"\n              text\n              @click=\"save\"\n            >\n              保存\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRoute, useRouter } from 'vue-router'\n\nexport default {\n  name: 'MemoEdit',\n  setup() {\n    const store = useStore()\n    const route = useRoute()\n    const router = useRouter()\n\n    const memo = ref({\n      title: '',\n      content: '',\n      category: ''\n    })\n\n    const rules = {\n      required: value => !!value || '必須項目です'\n    }\n\n    const isNew = computed(() => !route.params.id)\n    const categories = computed(() => store.getters['category/allCategories'])\n\n    const save = async () => {\n      try {\n        if (isNew.value) {\n          await store.dispatch('memo/createMemo', memo.value)\n        } else {\n          await store.dispatch('memo/updateMemo', {\n            id: route.params.id,\n            ...memo.value\n          })\n        }\n        router.push('/memos')\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    }\n\n    onMounted(async () => {\n      try {\n        await Promise.all([\n          store.dispatch('category/fetchCategories'),\n          !isNew.value && store.dispatch('memo/fetchMemo', route.params.id)\n        ])\n\n        if (!isNew.value) {\n          const currentMemo = store.getters['memo/currentMemo']\n          if (currentMemo) {\n            memo.value = { ...currentMemo }\n          }\n        }\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    })\n\n    return {\n      memo,\n      rules,\n      isNew,\n      categories,\n      save\n    }\n  }\n}\n</script> ","/Users/dai/Documents/Memo-App/src/frontend/src/views/MemoDetail.vue",["81"],"<template>\n  <v-container>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-card>\n          <v-card-title class=\"text-h5\">\n            {{ memo.title }}\n            <v-spacer></v-spacer>\n            <v-chip\n              :color=\"getCategoryColor(memo.category)\"\n              text-color=\"white\"\n              class=\"mr-2\"\n            >\n              {{ memo.category }}\n            </v-chip>\n            <v-btn\n              icon\n              @click=\"editMemo\"\n            >\n              <v-icon>mdi-pencil</v-icon>\n            </v-btn>\n            <v-btn\n              icon\n              @click=\"deleteMemo\"\n            >\n              <v-icon>mdi-delete</v-icon>\n            </v-btn>\n          </v-card-title>\n\n          <v-card-text>\n            <div class=\"text-subtitle-2 mb-2\">\n              作成日: {{ formatDate(memo.createdAt) }}\n            </div>\n            <div class=\"text-subtitle-2 mb-4\">\n              更新日: {{ formatDate(memo.updatedAt) }}\n            </div>\n            <div class=\"text-body-1 white-space-pre-wrap\">\n              {{ memo.content }}\n            </div>\n          </v-card-text>\n\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn\n              color=\"primary\"\n              text\n              @click=\"$router.push('/memos')\"\n            >\n              一覧に戻る\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-dialog v-model=\"dialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title>\n          <span class=\"text-h5\">メモ編集</span>\n        </v-card-title>\n\n        <v-card-text>\n          <v-container>\n            <v-row>\n              <v-col cols=\"12\">\n                <v-text-field\n                  v-model=\"editedItem.title\"\n                  label=\"タイトル\"\n                ></v-text-field>\n              </v-col>\n              <v-col cols=\"12\">\n                <v-textarea\n                  v-model=\"editedItem.content\"\n                  label=\"内容\"\n                ></v-textarea>\n              </v-col>\n              <v-col cols=\"12\">\n                <v-select\n                  v-model=\"editedItem.category\"\n                  :items=\"categories\"\n                  label=\"カテゴリー\"\n                ></v-select>\n              </v-col>\n            </v-row>\n          </v-container>\n        </v-card-text>\n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" text @click=\"close\">キャンセル</v-btn>\n          <v-btn color=\"blue darken-1\" text @click=\"save\">保存</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRoute, useRouter } from 'vue-router'\n\nexport default {\n  name: 'MemoDetail',\n  setup() {\n    const store = useStore()\n    const route = useRoute()\n    const router = useRouter()\n\n    const dialog = ref(false)\n    const editedItem = ref({\n      title: '',\n      content: '',\n      category: ''\n    })\n\n    const memo = computed(() => store.getters['memo/currentMemo'])\n    const categories = computed(() => store.getters['category/allCategories'])\n\n    const getCategoryColor = (category) => {\n      const categoryObj = categories.value.find(c => c.name === category)\n      return categoryObj ? categoryObj.color : 'grey'\n    }\n\n    const formatDate = (date) => {\n      return new Date(date).toLocaleString('ja-JP')\n    }\n\n    const editMemo = () => {\n      editedItem.value = Object.assign({}, memo.value)\n      dialog.value = true\n    }\n\n    const deleteMemo = async () => {\n      if (confirm('このメモを削除してもよろしいですか？')) {\n        try {\n          await store.dispatch('memo/deleteMemo', memo.value.id)\n          router.push('/memos')\n        } catch (error) {\n          // エラー処理はグローバルエラーハンドラーで行う\n        }\n      }\n    }\n\n    const close = () => {\n      dialog.value = false\n      editedItem.value = Object.assign({}, memo.value)\n    }\n\n    const save = async () => {\n      try {\n        await store.dispatch('memo/updateMemo', {\n          id: memo.value.id,\n          ...editedItem.value\n        })\n        close()\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    }\n\n    onMounted(async () => {\n      try {\n        await Promise.all([\n          store.dispatch('memo/fetchMemo', route.params.id),\n          store.dispatch('category/fetchCategories')\n        ])\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    })\n\n    return {\n      memo,\n      categories,\n      dialog,\n      editedItem,\n      getCategoryColor,\n      formatDate,\n      editMemo,\n      deleteMemo,\n      close,\n      save\n    }\n  }\n}\n</script>\n\n<style scoped>\n.white-space-pre-wrap {\n  white-space: pre-wrap;\n}\n</style> ","/Users/dai/Documents/Memo-App/src/frontend/src/views/Login.vue",["82"],"<template>\n  <v-container class=\"fill-height\" fluid>\n    <v-row align=\"center\" justify=\"center\">\n      <v-col cols=\"12\" sm=\"8\" md=\"4\">\n        <v-card class=\"elevation-12\">\n          <v-toolbar color=\"primary\" dark flat>\n            <v-toolbar-title>ログイン</v-toolbar-title>\n          </v-toolbar>\n          <v-card-text>\n            <v-form @submit.prevent=\"handleLogin\" ref=\"form\">\n              <v-text-field\n                v-model=\"email\"\n                label=\"メールアドレス\"\n                name=\"email\"\n                prepend-icon=\"mdi-email\"\n                type=\"email\"\n                :rules=\"[rules.required, rules.email]\"\n              ></v-text-field>\n              <v-text-field\n                v-model=\"password\"\n                label=\"パスワード\"\n                name=\"password\"\n                prepend-icon=\"mdi-lock\"\n                type=\"password\"\n                :rules=\"[rules.required]\"\n              ></v-text-field>\n            </v-form>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"primary\" @click=\"handleLogin\">ログイン</v-btn>\n          </v-card-actions>\n          <v-card-text class=\"text-center\">\n            <router-link to=\"/register\">新規登録はこちら</router-link>\n            <br>\n            <router-link to=\"/forgot-password\">パスワードをお忘れの方はこちら</router-link>\n          </v-card-text>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n\nexport default {\n  name: 'Login',\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n    const form = ref(null)\n\n    const email = ref('')\n    const password = ref('')\n\n    const rules = {\n      required: value => !!value || '必須項目です',\n      email: value => {\n        const pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        return pattern.test(value) || '有効なメールアドレスを入力してください'\n      }\n    }\n\n    const handleLogin = async () => {\n      const { valid } = await form.value.validate()\n      \n      if (valid) {\n        try {\n          await store.dispatch('auth/login', {\n            email: email.value,\n            password: password.value\n          })\n          router.push('/memos')\n        } catch (error) {\n          // エラー処理はグローバルエラーハンドラーで行う\n        }\n      }\n    }\n\n    return {\n      email,\n      password,\n      rules,\n      form,\n      handleLogin\n    }\n  }\n}\n</script> ","/Users/dai/Documents/Memo-App/src/frontend/src/views/MemoList.vue",["83"],"<template>\n  <v-container>\n    <v-row>\n      <v-col cols=\"12\">\n        <v-card>\n          <v-card-title>\n            メモ一覧\n            <v-spacer></v-spacer>\n            <v-text-field\n              v-model=\"search\"\n              append-icon=\"mdi-magnify\"\n              label=\"検索\"\n              single-line\n              hide-details\n            ></v-text-field>\n          </v-card-title>\n\n          <v-data-table\n            :headers=\"headers\"\n            :items=\"filteredMemos\"\n            :loading=\"loading\"\n            :items-per-page=\"10\"\n            class=\"elevation-1\"\n          >\n            <template v-slot:top>\n              <v-toolbar flat>\n                <v-toolbar-title>メモ管理</v-toolbar-title>\n                <v-divider class=\"mx-4\" inset vertical></v-divider>\n                <v-spacer></v-spacer>\n                <v-btn\n                  color=\"primary\"\n                  dark\n                  class=\"mb-2\"\n                  @click=\"createMemo\"\n                >\n                  新規メモ作成\n                </v-btn>\n              </v-toolbar>\n            </template>\n\n            <template v-slot:[`item.title`]=\"{ item }\">\n              <router-link :to=\"`/memos/${item.id}`\">{{ item.title }}</router-link>\n            </template>\n\n            <template v-slot:[`item.category`]=\"{ item }\">\n              <v-chip\n                :color=\"getCategoryColor(item.category)\"\n                text-color=\"white\"\n              >\n                {{ item.category }}\n              </v-chip>\n            </template>\n\n            <template v-slot:[`item.actions`]=\"{ item }\">\n              <v-icon\n                small\n                class=\"mr-2\"\n                @click=\"editMemo(item)\"\n              >\n                mdi-pencil\n              </v-icon>\n              <v-icon\n                small\n                @click=\"deleteMemo(item)\"\n              >\n                mdi-delete\n              </v-icon>\n            </template>\n          </v-data-table>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-dialog v-model=\"dialog\" max-width=\"500px\">\n      <v-card>\n        <v-card-title>\n          <span class=\"text-h5\">{{ formTitle }}</span>\n        </v-card-title>\n\n        <v-card-text>\n          <v-container>\n            <v-row>\n              <v-col cols=\"12\">\n                <v-text-field\n                  v-model=\"editedItem.title\"\n                  label=\"タイトル\"\n                ></v-text-field>\n              </v-col>\n              <v-col cols=\"12\">\n                <v-textarea\n                  v-model=\"editedItem.content\"\n                  label=\"内容\"\n                ></v-textarea>\n              </v-col>\n              <v-col cols=\"12\">\n                <v-select\n                  v-model=\"editedItem.category\"\n                  :items=\"categories\"\n                  label=\"カテゴリー\"\n                ></v-select>\n              </v-col>\n            </v-row>\n          </v-container>\n        </v-card-text>\n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-1\" text @click=\"close\">キャンセル</v-btn>\n          <v-btn color=\"blue darken-1\" text @click=\"save\">保存</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nimport { ref, computed, onMounted } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n\nexport default {\n  name: 'MemoList',\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n\n    const search = ref('')\n    const dialog = ref(false)\n    const editedIndex = ref(-1)\n    const editedItem = ref({\n      title: '',\n      content: '',\n      category: ''\n    })\n    const defaultItem = {\n      title: '',\n      content: '',\n      category: ''\n    }\n\n    const headers = [\n      { text: 'タイトル', value: 'title' },\n      { text: 'カテゴリー', value: 'category' },\n      { text: '作成日', value: 'createdAt' },\n      { text: '更新日', value: 'updatedAt' },\n      { text: '操作', value: 'actions', sortable: false }\n    ]\n\n    const loading = computed(() => store.getters['memo/isLoading'])\n    const memos = computed(() => store.getters['memo/allMemos'])\n    const categories = computed(() => store.getters['category/allCategories'])\n\n    const filteredMemos = computed(() => {\n      return memos.value.filter(memo => {\n        return memo.title.toLowerCase().includes(search.value.toLowerCase()) ||\n               memo.content.toLowerCase().includes(search.value.toLowerCase())\n      })\n    })\n\n    const formTitle = computed(() => {\n      return editedIndex.value === -1 ? '新規メモ' : 'メモ編集'\n    })\n\n    const getCategoryColor = (category) => {\n      const categoryObj = categories.value.find(c => c.name === category)\n      return categoryObj ? categoryObj.color : 'grey'\n    }\n\n    const createMemo = () => {\n      editedIndex.value = -1\n      editedItem.value = Object.assign({}, defaultItem)\n      dialog.value = true\n    }\n\n    const editMemo = (item) => {\n      editedIndex.value = memos.value.indexOf(item)\n      editedItem.value = Object.assign({}, item)\n      dialog.value = true\n    }\n\n    const deleteMemo = async (item) => {\n      if (confirm('このメモを削除してもよろしいですか？')) {\n        try {\n          await store.dispatch('memo/deleteMemo', item.id)\n        } catch (error) {\n          // エラー処理はグローバルエラーハンドラーで行う\n        }\n      }\n    }\n\n    const close = () => {\n      dialog.value = false\n      editedItem.value = Object.assign({}, defaultItem)\n      editedIndex.value = -1\n    }\n\n    const save = async () => {\n      try {\n        if (editedIndex.value > -1) {\n          await store.dispatch('memo/updateMemo', {\n            id: editedItem.value.id,\n            ...editedItem.value\n          })\n        } else {\n          await store.dispatch('memo/createMemo', editedItem.value)\n        }\n        close()\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    }\n\n    onMounted(async () => {\n      try {\n        await Promise.all([\n          store.dispatch('memo/fetchMemos'),\n          store.dispatch('category/fetchCategories')\n        ])\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    })\n\n    return {\n      search,\n      dialog,\n      editedIndex,\n      editedItem,\n      headers,\n      loading,\n      filteredMemos,\n      categories,\n      formTitle,\n      getCategoryColor,\n      createMemo,\n      editMemo,\n      deleteMemo,\n      close,\n      save\n    }\n  }\n}\n</script> ","/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/auth.js",["84"],"import axios from 'axios'\n\nconst state = {\n  token: localStorage.getItem('token') || '',\n  user: JSON.parse(localStorage.getItem('user')) || null\n}\n\nconst getters = {\n  isLoggedIn: state => !!state.token,\n  currentUser: state => state.user\n}\n\nconst actions = {\n  async login({ commit }, credentials) {\n    try {\n      const response = await axios.post('/api/auth/login', credentials)\n      const { token, user } = response.data\n      \n      localStorage.setItem('token', token)\n      localStorage.setItem('user', JSON.stringify(user))\n      \n      commit('SET_TOKEN', token)\n      commit('SET_USER', user)\n      \n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  async logout({ commit }) {\n    localStorage.removeItem('token')\n    localStorage.removeItem('user')\n    commit('SET_TOKEN', '')\n    commit('SET_USER', null)\n  }\n}\n\nconst mutations = {\n  SET_TOKEN(state, token) {\n    state.token = token\n  },\n  SET_USER(state, user) {\n    state.user = user\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n} ","/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/category.js",["85"],"import axios from 'axios'\n\nconst state = {\n  categories: [],\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  allCategories: state => state.categories,\n  isLoading: state => state.loading,\n  error: state => state.error\n}\n\nconst actions = {\n  async fetchCategories({ commit }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get('/api/categories')\n      commit('SET_CATEGORIES', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async createCategory({ commit }, category) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.post('/api/categories', category)\n      commit('ADD_CATEGORY', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async updateCategory({ commit }, { id, category }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.put(`/api/categories/${id}`, category)\n      commit('UPDATE_CATEGORY', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async deleteCategory({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      await axios.delete(`/api/categories/${id}`)\n      commit('DELETE_CATEGORY', id)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nconst mutations = {\n  SET_CATEGORIES(state, categories) {\n    state.categories = categories\n  },\n  ADD_CATEGORY(state, category) {\n    state.categories.push(category)\n  },\n  UPDATE_CATEGORY(state, updatedCategory) {\n    const index = state.categories.findIndex(c => c.id === updatedCategory.id)\n    if (index !== -1) {\n      state.categories.splice(index, 1, updatedCategory)\n    }\n  },\n  DELETE_CATEGORY(state, id) {\n    state.categories = state.categories.filter(c => c.id !== id)\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n} ","/Users/dai/Documents/Memo-App/src/frontend/src/store/modules/memo.js",["86"],"import axios from 'axios'\n\nconst state = {\n  memos: [],\n  currentMemo: null,\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  allMemos: state => state.memos,\n  currentMemo: state => state.currentMemo,\n  isLoading: state => state.loading,\n  error: state => state.error\n}\n\nconst actions = {\n  async fetchMemos({ commit }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get('/api/memos')\n      commit('SET_MEMOS', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async fetchMemo({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.get(`/api/memos/${id}`)\n      commit('SET_CURRENT_MEMO', response.data)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async createMemo({ commit }, memo) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.post('/api/memos', memo)\n      commit('ADD_MEMO', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async updateMemo({ commit }, { id, memo }) {\n    commit('SET_LOADING', true)\n    try {\n      const response = await axios.put(`/api/memos/${id}`, memo)\n      commit('UPDATE_MEMO', response.data)\n      return response.data\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  },\n\n  async deleteMemo({ commit }, id) {\n    commit('SET_LOADING', true)\n    try {\n      await axios.delete(`/api/memos/${id}`)\n      commit('DELETE_MEMO', id)\n    } catch (error) {\n      commit('SET_ERROR', error.message)\n      throw error\n    } finally {\n      commit('SET_LOADING', false)\n    }\n  }\n}\n\nconst mutations = {\n  SET_MEMOS(state, memos) {\n    state.memos = memos\n  },\n  SET_CURRENT_MEMO(state, memo) {\n    state.currentMemo = memo\n  },\n  ADD_MEMO(state, memo) {\n    state.memos.unshift(memo)\n  },\n  UPDATE_MEMO(state, updatedMemo) {\n    const index = state.memos.findIndex(m => m.id === updatedMemo.id)\n    if (index !== -1) {\n      state.memos.splice(index, 1, updatedMemo)\n    }\n  },\n  DELETE_MEMO(state, id) {\n    state.memos = state.memos.filter(m => m.id !== id)\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n} ","/Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalErrorHandler.vue",["87"],"<template>\n  <v-snackbar\n    v-model=\"show\"\n    :color=\"errorType\"\n    :timeout=\"timeout\"\n    top\n  >\n    {{ errorMessage }}\n    <template v-slot:action=\"{ attrs }\">\n      <v-btn\n        text\n        v-bind=\"attrs\"\n        @click=\"show = false\"\n      >\n        閉じる\n      </v-btn>\n    </template>\n  </v-snackbar>\n</template>\n\n<script>\nimport { ref, computed, watch } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'GlobalErrorHandler',\n  setup() {\n    const store = useStore()\n    const show = ref(false)\n    const timeout = 5000\n\n    const error = computed(() => store.state.error)\n    const errorMessage = computed(() => {\n      if (!error.value) return ''\n      \n      if (error.value.response) {\n        const status = error.value.response.status\n        const message = error.value.response.data.message\n\n        switch (status) {\n          case 400:\n            return '入力内容に誤りがあります'\n          case 401:\n            return '認証に失敗しました。再度ログインしてください'\n          case 403:\n            return 'この操作を実行する権限がありません'\n          case 404:\n            return 'リソースが見つかりません'\n          case 500:\n            return 'サーバーエラーが発生しました'\n          default:\n            return message || 'エラーが発生しました'\n        }\n      }\n\n      return 'エラーが発生しました'\n    })\n\n    const errorType = computed(() => {\n      if (!error.value) return 'error'\n      \n      if (error.value.response) {\n        const status = error.value.response.status\n\n        switch (status) {\n          case 401:\n          case 403:\n            return 'warning'\n          default:\n            return 'error'\n        }\n      }\n\n      return 'error'\n    })\n\n    // エラーが発生したらスナックバーを表示\n    const showError = () => {\n      if (error.value) {\n        show.value = true\n      }\n    }\n\n    // エラーの監視\n    watch(error, showError)\n\n    return {\n      show,\n      timeout,\n      errorMessage,\n      errorType\n    }\n  }\n}\n</script> ","/Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalLoading.vue",["88"],"<template>\n  <v-overlay\n    :value=\"loading\"\n    :opacity=\"0.8\"\n    color=\"primary\"\n  >\n    <v-progress-circular\n      indeterminate\n      size=\"64\"\n      color=\"white\"\n    ></v-progress-circular>\n  </v-overlay>\n</template>\n\n<script>\nimport { computed } from 'vue'\nimport { useStore } from 'vuex'\n\nexport default {\n  name: 'GlobalLoading',\n  setup() {\n    const store = useStore()\n\n    const loading = computed(() => {\n      return store.getters['memo/isLoading'] ||\n             store.getters['category/isLoading'] ||\n             store.getters['auth/isLoading']\n    })\n\n    return {\n      loading\n    }\n  }\n}\n</script> ","/Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalNavigation.vue",["89"],"<template>\n  <v-app-bar\n    app\n    color=\"primary\"\n    dark\n  >\n    <v-app-bar-nav-icon\n      @click=\"drawer = !drawer\"\n      class=\"d-flex d-sm-none\"\n    ></v-app-bar-nav-icon>\n\n    <v-toolbar-title>メモアプリ</v-toolbar-title>\n\n    <v-spacer></v-spacer>\n\n    <v-btn\n      icon\n      @click=\"logout\"\n    >\n      <v-icon>mdi-logout</v-icon>\n    </v-btn>\n  </v-app-bar>\n\n  <v-navigation-drawer\n    v-model=\"drawer\"\n    app\n  >\n    <v-list>\n      <v-list-item\n        v-for=\"item in menuItems\"\n        :key=\"item.title\"\n        :to=\"item.path\"\n        link\n      >\n        <v-list-item-icon>\n          <v-icon>{{ item.icon }}</v-icon>\n        </v-list-item-icon>\n\n        <v-list-item-content>\n          <v-list-item-title>{{ item.title }}</v-list-item-title>\n        </v-list-item-content>\n      </v-list-item>\n    </v-list>\n  </v-navigation-drawer>\n</template>\n\n<script>\nimport { ref, computed } from 'vue'\nimport { useStore } from 'vuex'\nimport { useRouter } from 'vue-router'\n\nexport default {\n  name: 'GlobalNavigation',\n  setup() {\n    const store = useStore()\n    const router = useRouter()\n    const drawer = ref(false)\n\n    const menuItems = [\n      {\n        title: 'メモ一覧',\n        path: '/memos',\n        icon: 'mdi-note-text'\n      },\n      {\n        title: 'カテゴリー管理',\n        path: '/categories',\n        icon: 'mdi-tag-multiple'\n      }\n    ]\n\n    const logout = async () => {\n      try {\n        await store.dispatch('auth/logout')\n        router.push('/login')\n      } catch (error) {\n        // エラー処理はグローバルエラーハンドラーで行う\n      }\n    }\n\n    return {\n      drawer,\n      menuItems,\n      logout\n    }\n  }\n}\n</script> ",{"ruleId":null,"fatal":true,"severity":2,"message":"90"},{"ruleId":null,"fatal":true,"severity":2,"message":"91"},{"ruleId":null,"fatal":true,"severity":2,"message":"92"},{"ruleId":null,"fatal":true,"severity":2,"message":"93"},{"ruleId":null,"fatal":true,"severity":2,"message":"94"},{"ruleId":null,"fatal":true,"severity":2,"message":"95"},{"ruleId":null,"fatal":true,"severity":2,"message":"96"},{"ruleId":null,"fatal":true,"severity":2,"message":"97"},{"ruleId":null,"fatal":true,"severity":2,"message":"98"},{"ruleId":null,"fatal":true,"severity":2,"message":"99"},{"ruleId":null,"fatal":true,"severity":2,"message":"100"},{"ruleId":null,"fatal":true,"severity":2,"message":"101"},{"ruleId":null,"fatal":true,"severity":2,"message":"102"},{"ruleId":null,"fatal":true,"severity":2,"message":"103"},"Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/main.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/App.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/store/index.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/views/CategoryList.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/views/MemoEdit.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/views/MemoDetail.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/views/Login.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/views/MemoList.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/store/modules/auth.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/store/modules/category.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/store/modules/memo.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalErrorHandler.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalLoading.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for /Users/dai/Documents/Memo-App/src/frontend/src/components/GlobalNavigation.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files."]